name: terraform

on:
  workflow_call:
    inputs:
      command:
        description: "The terraform command to run (create, destroy, reset)"
        required: true
        type: string
      branch:
        description: "Branch to checkout to"
        required: true
        type: string
      sha:
        description: "Last commit in the branch"
        required: false
        type: string
    secrets:
      PAT:
        description: "Used in Flux to clone the repo"
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    permissions:
      contents: read
      id-token: write

    env:
      TF_VAR_github_branch: ${{ inputs.branch }}

    steps:
      - name: Set latest commit status as pending
        if: inputs.sha
        uses: myrotvorets/set-commit-status-action@v2.0.1
        with:
          sha: ${{ inputs.sha }}
          token: ${{ secrets.PAT }}
          status: pending

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.command == 'destroy' && 'main' || inputs.branch }}

      - name: Get Vault token
        uses: hashicorp/vault-action@v3.0.0
        with:
          url: "https://vault.fluence.dev"
          path: jwt/github
          role: ci-spectrum
          method: jwt
          jwtGithubAudience: "https://github.com/fluencelabs"
          jwtTtl: 300
          exportToken: false
          secrets: |
            kv/digitalocean/gitops token | DIGITALOCEAN_TOKEN ;
            kv/cloudflare/gitops token | CLOUDFLARE_API_TOKEN ;
            kv/ci/spectrum-ci id | AWS_ACCESS_KEY_ID ;
            kv/ci/spectrum-ci secret | AWS_SECRET_ACCESS_KEY ;

      - name: Sanitize branch name
        id: sanitize
        run: |
          BRANCH="${{ inputs.branch }}"
          # Sanitize branch name for DNS compatibility
          BRANCH="${BRANCH//[^a-zA-Z0-9-]/-}"
          BRANCH="${BRANCH//+(-)/-}"
          BRANCH="${BRANCH,,}" # Convert to lowercase
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: terraform init
        run: terraform init

      - name: terraform workspace
        run: |
          terraform workspace select -or-create=true ${{ steps.sanitize.outputs.branch }}

      - name: Run terraform command
        run: |
          case ${{ inputs.command }} in
          create)
            terraform apply -auto-approve ;;
          destroy)
            terraform destroy -auto-approve ;;
          reset)
            terraform destroy -auto-approve
            terraform apply -auto-approve
          ;;
          *)
            echo "No such command ${{ inputs.command }}"
            exit 1
          ;;
          esac

      - name: Upload Artifacts
        if: inputs.command == 'create' || inputs.command == 'reset'
        uses: actions/upload-artifact@v4
        with:
          name: configs
          path: |
            terraform/kubeconfig
            terraform/talosconfig

      - name: Set latest commit status as ${{ job.status }}
        uses: myrotvorets/set-commit-status-action@master
        if: inputs.sha && always()
        with:
          sha: ${{ inputs.sha }}
          token: ${{ secrets.PAT }}
          status: ${{ job.status }}
